---
title: PBL I - MI Programação
---
classDiagram
direction TD

User "1" *-- "1" Login
User "1" *-- "1" Person
User "1" *-- "1" UserId

User "1" o-- "*" Ticket
User <-- BoxOffice: compra tickets
User <-- Event: avalia

Event "1" *-- "1" EventId
Event "1" *-- "1" Poster
Event "1" o-- "*" Evaluation
Event "1" *-- "1" BoxOffice

BoxOffice "1" *-- "1" Ticket
BoxOffice --> SoldOut
BoxOffice -- Transaction

Ticket "1" *-- "1" EventId

Evaluation --|> Entity
Evaluation "1" *-- "1" EvaluationId
Evaluation "1" *-- "1" UserId
Evaluation "1" *-- "1" EventId

EmailDocument "1" *-- "1" EmailMetadata
EmailDocument "1" *-- "1" Html

Transaction "1" *-- "1" Html
Transaction "1" *-- "1" Participant
Transaction "1" *-- "1" EmailDocument
Transaction "1" *-- "1" PaymentDetails
Transaction "1" *-- "1" EmailMetadata

PaymentMethod "1" *-- "1" Html: gera
PaymentDetails "1" *-- "1" PaymentMethod
Participant "1" *-- "1" User
Participant "1" <-- "1" EventManagementBusiness: gera


class User {
    - id: UserId
    - login: Login
    - person: Person
    - admin: boolean
    - boughtTickets: ArrayList~Ticket~

    + withTickets(tickets: List~Ticket~) User
    + asAdmin() User
    + with(login: Login) User
    + with(person: Person) User
    + copy() User

    + id() UserId
    + login() Login
    + person() Person
    + isAdmin() boolean
    + tickets() List~Ticket~

    + isOwnerOf(login: Login) boolean

    + buyTicket(ticket: Ticket) void
    + returnTicket(ticket: Ticket) void
}

class Person {
    - name String
    - cpf String

    + withName(name String) Person
    + withCpf(cpf String) Person
    
    + name() String
    + cpf() String
}

class Login {
    - email String
    - password String

    + withEmail(email String) Login
    + withPassword(password String) Login

    + email() String
    + equals(obj: Object) boolean
}

namespace UserRelated {
    class User
    class UserId
    class Person
    class Login
}


%% Events

class Event {
    - id EventId
    - poster Poster
    - boxOffice BoxOffice
    - evaluations ArrayList~Evaluation~

    + id() EventId
    + poster() Poster
    + boxOffice() BoxOffice
    + evaluations() List~Evaluation~

    + isAvailableFor(date LocalDate) boolean
    
    + receiveEvaluation(evaluation Evaluation) void
    + addCapacity(capacity Integer) void
}

class BoxOffice {
    - sample Ticket
    - capacity Integer
    - sales Integer

    + ofCapacity(amount Integer) BoxOffice

    + available() Integer
    + isSoldOut() boolean
    + sales() Integer
    + capacity() Integer

    + ticket(amount Integer) Ticket

    + sell(ticket Ticket) void
    + refund(ticket Ticket) void
}

class Poster {
    - title String
    - description String
    - schedule String

    + title() String
    + description() String
    + date() LocalDate
}

class Ticket {
    - event EventId
    - price Double
    - availableFor Integer

    + copy() Ticket
    + packedFor(persons Integer) Ticket

    + event() EventId
    + price() Double
    + availableFor() Integer
    + sameEvent(other Ticket) boolean
}


class EventId {
    - id: UUID
    + id() UUID
}

EventId --|> EntityId

%% Evaluation

class Evaluation {
    - id EvaluationId
    - event EventId
    - author UserId
    - comment String

    + id() EvaluationId
    + author() UserId
    + event() EventId
    + comment() String
}

class EvaluationId {
    - id: UUID
    + id() UUID
}

%% EvaluationId --|> EntityId

namespace EvaluationRelated {
    class Evaluation
    class EvaluationId
}

SoldOut --|> Exception

namespace EventRelated {
    class Event
    class SoldOut
    class EventId
    class BoxOffice
    class Ticket
    class Poster
}

%% Email 

class EmailDocument {
    - meta EmailMetadata
    - body Html
    + body() String
    + metadata() EmailMetadata
}

class EmailMetadata {
    - senderEmail String
    - recipientEmail String
    - subject String
    + sender() String
    + recipient() String
    + subject() String
}

class Html {
    - tag String
    - content String
    - attributes String
    - closable boolean

    + br() Html
    + node(tag String) Html
    + content(content String) Html
    + empty() Html
    + attributes() Html

    + toString() String
}

namespace EmailRelated {
    class EmailDocument
    class EmailMetadata
    class Html
}

%% Payment

class Transaction {
    - id TransactionId
    - description String
    - payer Participant
    - recipient Participant
    - payment PaymentDetails

    + id() TransactionId
    + toEmail() EmailDocument
}

%% Transaction "1" *-- "1" TransactionId

class PaymentMethod {
        - method String
        - details String

        + html() String
        + header() String
        + details() String
        + listItem(title String, description String) String
    }

    class PaymentDetails {
        - method PaymentMethod
        - amount Double

        + amount() String
        + html() String
    }

    class Participant {
        - email String
        - name String
        - taxId String

        + self() Participant
        + email() String
        + toString() String
    }

    class EventManagementBusiness {
        - email static final String
        - cnpj static final String
        - company static final String
        + email() String
        + cpnj() String
        + name() String
    }

    namespace PaymentRelated {
        class Transaction
        class PaymentMethod
        class PaymentDetails
        class Participant
        class EventManagementBusiness
    }